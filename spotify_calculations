import sqlite3
import matplotlib.pyplot as plt
import os
import numpy as np

DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'database.db')

def fetch_playlist_data():
    """ Fetches the count of unique artists and total tracks per playlist from the database. """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    query = '''
    SELECT playlist_name, COUNT(DISTINCT artist) AS unique_artists_count, COUNT(*) AS total_tracks
    FROM playlist_tracks
    GROUP BY playlist_name;
    '''
    cursor.execute(query)
    results = cursor.fetchall()
    cursor.close()
    conn.close()
    return results

def write_calculations_to_file(data, file_path):
    """ Writes the fetched data to a text file. """
    with open(file_path, 'w') as file:
        file.write("Playlist Name,Unique Artists Count,Total Tracks Count\n")
        for item in data:
            file.write(f"{item[0]},{item[1]},{item[2]}\n")


def plot_data(data):
    """ Plots the number of unique artists and total tracks per playlist using Matplotlib. """
    playlists = [x[0] for x in data]  # Playlist names
    unique_artists_counts = [x[1] for x in data]  # Unique artists counts
    total_tracks_counts = [x[2] for x in data]  # Total tracks counts

    x = np.arange(len(playlists))  # Label locations
    width = 0.35  # The width of the bars

    fig, ax = plt.subplots(figsize=(12, 8))
    rects1 = ax.bar(x - width/2, unique_artists_counts, width, label='Unique Artists')
    rects2 = ax.bar(x + width/2, total_tracks_counts, width, label='Total Tracks')

    ax.set_xlabel('Playlists')
    ax.set_ylabel('Counts')
    ax.set_title('Comparison of Unique Artists and First 25 Tracks Per Playlist')
    ax.set_xticks(x)
    ax.set_xticklabels(playlists, rotation=45, ha="right")
    ax.legend()

    def autolabel(rects):
        for rect in rects:
            height = rect.get_height()
            ax.annotate('{}'.format(height),
                        xy=(rect.get_x() + rect.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom')

    autolabel(rects1)
    autolabel(rects2)

    fig.tight_layout()
    plt.show()

if __name__ == '__main__':
    data = fetch_playlist_data()
    if data:
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'spotify_calculations.txt')

        write_calculations_to_file(data, file_path)

        plot_data(data)
    else:
        print("No data available to plot.")
 